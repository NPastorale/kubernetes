apiVersion: v1
kind: Namespace
metadata:
  name: archmirror

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: archmirror-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 192.168.1.2
    path: "/share/Archmirror_data/Data"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: archmirror-pvc
  namespace: archmirror
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: http-server
  namespace: archmirror
spec:
  type: ClusterIP
  selector:
    app: http-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: http-server
  namespace: archmirror
  labels:
    app: http-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: http-server
  template:
    metadata:
      labels:
        app: http-server
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: archmirror-pvc
      containers:
        - name: http-server
          image: npastorale/archmirror-http-server
          imagePullPolicy: Always
          env:
            - name: TZ
              value: "Europe/Madrid"
          ports:
            - containerPort: 80
          volumeMounts:
            - name: data
              mountPath: /data
              readOnly: true

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: rsync-client
  namespace: archmirror
spec:
  schedule: "*/15 * * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 4
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
            - name: data
              persistentVolumeClaim:
                claimName: archmirror-pvc
          containers:
            - name: rsync-client
              image: npastorale/archmirror-rsync-client
              imagePullPolicy: IfNotPresent
              env:
                - name: TZ
                  value: "Europe/Madrid"
              volumeMounts:
                - name: data
                  mountPath: /data
          restartPolicy: OnFailure

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: http-server-ingress
  namespace: archmirror
  annotations:
    cert-manager.io/issuer: "letsencrypt-prod"
spec:
  tls:
    - hosts:
        - mirrors.nahue.com.ar
      secretName: linux-mirrors
  rules:
    - host: mirrors.nahue.com.ar
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: http-server
                port:
                  number: 80

---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-staging
  namespace: archmirror
spec:
  acme:
    # The ACME server URL
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: npastorale@gmail.com
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-staging
    # Enable the HTTP-01 challenge provider
    solvers:
      - http01:
          ingress:
            class: nginx

---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-prod
  namespace: archmirror
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: npastorale@gmail.com
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    # Enable the HTTP-01 challenge provider
    solvers:
      - http01:
          ingress:
            class: nginx
